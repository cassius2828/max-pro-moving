
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/email.mjs
import { format } from "date-fns";
import { MailtrapClient } from "mailtrap";

// src/utils.js
var getNumOfMovers = (totalNumOfTrucks) => {
  if (totalNumOfTrucks > 2)
    return 4;
  else
    return 2;
};
var convertBoxTruckToNumber = (boxTruckValStr) => {
  switch (boxTruckValStr) {
    case "0":
      return 0;
    case "1":
      return 1;
    case "2":
      return 2;
    case "3+":
      return 3;
    case "recommend":
      return 0;
    default:
      return 0;
  }
};
function formatPhoneNumber(phone) {
  if (/[()\-\s]/.test(phone))
    return phone;
  const cleaned = phone.replace(/\D/g, "");
  if (cleaned.length === 10) {
    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(
      6
    )}`;
  } else if (cleaned.length === 11 && cleaned.startsWith("1")) {
    return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(
      7
    )}`;
  }
  return phone;
}
function compileAdditionalDetails(obj) {
  let finalStr = ``;
  let objEntries = Object.entries(obj);
  objEntries.forEach((entry) => {
    finalStr = finalStr.concat(`${entry[0]}: ${entry[1]}
`);
  });
  return finalStr;
}
console.log(
  compileAdditionalDetails({
    largeItemsDetails: "Two bed frames",
    junkRemovalDetails: "the bed frames",
    specialtyItemsDetails: ""
  })
);

// netlify/functions/email.mjs
var customerTemplateID = "3ece9e65-b369-481a-8557-7d16607537ce";
var staffTemplateID = "6784645a-6d8c-4176-9adb-4dfe8e94f20a";
async function handler(req, context) {
  console.log(req, " <-- raw Fetch Request object");
  console.log(context, " <-- Netlify context (geo, site, etc.)");
  console.log("\u{1F50D} req headers:", Object.fromEntries(req.headers));
  let payload;
  try {
    payload = await req.json();
    console.log("\u2705 Parsed JSON body:", payload);
  } catch (err) {
    console.error("\u274C Failed to parse JSON:", err);
    return new Response(JSON.stringify({ error: "Invalid JSON" }), {
      status: 400,
      headers: { "Content-Type": "application/json" }
    });
  }
  const {
    firstName,
    lastName,
    phone,
    email,
    message,
    startingLocationStairFlights,
    endLocationStairFlights,
    stop1StairFlights,
    stop2StairFlights,
    stop3StairFlights,
    quoteAmount,
    serviceType,
    startingLocation,
    endLocation,
    startingLocationDetails,
    endLocationDetails,
    stop1,
    stop2,
    stop3,
    stop1Details,
    stop2Details,
    stop3Details,
    numOf16BoxTrucks,
    numOf20BoxTrucks,
    numOf26BoxTrucks,
    projectDate,
    timeOfDay,
    singleItemDetails,
    largeItemsDetails,
    junkRemovalDetails,
    specialtyItemsDetails,
    disassemblyDetails,
    distance
  } = payload;
  const customerTemplateDataObj = {
    first_name: firstName,
    last_name: lastName,
    quote_amount: `$${quoteAmount}`,
    serviceType,
    numOf26BoxTrucks,
    numOf20BoxTrucks,
    numOf16BoxTrucks,
    projectDate: format(new Date(projectDate), "MMMM do, yyyy"),
    projectStartTime: timeOfDay,
    distance,
    startingLocation,
    startingLocationStairFlights,
    // optional fields
    endLocationStairFlights: endLocationStairFlights || "N/A",
    stop1StairFlights: stop1StairFlights || "N/A",
    stop2StairFlights: stop2StairFlights || "N/A",
    stop3StairFlights: stop3StairFlights || "N/A",
    endLocation: endLocation || "N/A",
    stop1: stop1 || "N/A",
    stop2: stop2 || "N/A",
    stop3: stop3 || "N/A",
    startingLocationDetails: startingLocationDetails || "N/A",
    endLocationDetails: endLocationDetails || "N/A",
    stop1Details: stop1Details || "N/A",
    stop2Details: stop2Details || "N/A",
    stop3Details: stop3Details || "N/A",
    singleItemDetails: singleItemDetails || "N/A",
    largeItemsDetails: largeItemsDetails || "N/A",
    junkRemovalDetails: junkRemovalDetails || "N/A",
    specialtyItemsDetails: specialtyItemsDetails || "N/A",
    disassemblyDetails: disassemblyDetails || "N/A",
    message: message || "N/A"
  };
  const sumOfBoxTrucks = convertBoxTruckToNumber(numOf16BoxTrucks) + convertBoxTruckToNumber(numOf20BoxTrucks) + convertBoxTruckToNumber(numOf26BoxTrucks);
  const staffTemplateDataObj = {
    ...customerTemplateDataObj,
    numOfWorkers: getNumOfMovers(sumOfBoxTrucks),
    phone: formatPhoneNumber(phone),
    email
  };
  try {
    if (!email) {
      throw new Error("Missing `email` in body");
    }
    const sender = {
      name: "Detailed Moving Quote",
      email: "info@azmaxpro.com"
    };
    const clientRecipients = [{ email }];
    const staffRecipients = [
      // { email: "BaronLimaLLC@gmail.com" },
      { email: "cassius2828@gmail.com" }
    ];
    const sendToClientConfig = {
      from: sender,
      to: clientRecipients,
      template_uuid: customerTemplateID,
      template_variables: customerTemplateDataObj
    };
    const sendToStaffConfig = {
      from: sender,
      to: staffRecipients,
      template_uuid: staffTemplateID,
      template_variables: staffTemplateDataObj
    };
    const client = new MailtrapClient({
      // eslint-disable-next-line no-undef
      token: process.env.MT_MPM_DOMAIN_TOKEN
    });
    const sendToClient = client.send(sendToClientConfig);
    const sendToStaff = client.send(sendToStaffConfig);
    const results = await Promise.all([sendToClient, sendToStaff]);
    console.log("\u{1F4E7} Mailtrap results:", results);
    return new Response(JSON.stringify({ success: true, results }), {
      status: 200,
      headers: { "Content-Type": "application/json" }
    });
  } catch (err) {
    console.error("send-quote error:", err);
    return new Response(JSON.stringify({ error: err.message }), {
      status: 500,
      headers: { "Content-Type": "application/json" }
    });
  }
}
export {
  handler as default
};
//# sourceMappingURL=data:application/json;base64,
